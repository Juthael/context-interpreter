package com.tregouet.context_interpreter.inputs.impl;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

import com.tregouet.context_interpreter.data_types.construct.IConstruct;
import com.tregouet.context_interpreter.data_types.construct.IContextObject;
import com.tregouet.context_interpreter.data_types.construct.impl.Construct;
import com.tregouet.context_interpreter.data_types.construct.impl.ContextObject;

/**
 * @author Gael Tregouet
 */
public abstract class GenericFileReader {

	public static final String SEPARATOR = "/";
	
	private GenericFileReader() {
	}

	/**
	 * <p>
	 * Generates a list of 'context object' ({@link IContextObject}) out of a {@link Path} parameter pointing to a 
	 * text file.
	 * </p>
	 * 
	 * <p>
	 * These writing rules must be respected or exceptions will be thrown : <br>
	 * 1-The text contains one or more set of constructs generated using a context-free 
	 * grammar. <br>
	 * 2-Every set of constructs begins with a line containing only the character '/' <br>
	 * 3-A construct is a list of symbols from the grammar at use, separated by the 
	 * character '/'. New path, new line. No empty line. <br>
	 * </p>
	 * 
	 * @param path points to a text file (UTF-8) that must respect the rules described above.
	 * @return a 'context object', i.e. a sublist of the language generated by the grammar at use. 
	 * @throws FileReaderException 
	 */
	public static List<IContextObject> getContextObjects(Path path) throws FileReaderException {
		List<IContextObject> objects = new ArrayList<IContextObject>();
		BufferedReader reader;
		try {
			reader = Files.newBufferedReader(path);
		}
		catch (Exception e) {
			throw new FileReaderException("GenericFileReader.getContextObjects(Path) : "
					+ "BufferedReader ccannot be instantiated."
					+ System.lineSeparator() + e.getMessage());
		}
		String line;
		List<IConstruct> currObjConstructs = new ArrayList<IConstruct>();
		do {
			try {
				line = reader.readLine();
			}
			catch (IOException e) {
				throw new FileReaderException("getContextObjects(Path) : IOException thrown."
						+ System.lineSeparator() + e.getMessage());
			}
			if (line != null && !line.equals(SEPARATOR)) {
				currObjConstructs.add(new Construct(line.split(SEPARATOR)));
			}
			else {
				if (!currObjConstructs.isEmpty()) {
					objects.add(new ContextObject(currObjConstructs));
					currObjConstructs = new ArrayList<IConstruct>();
				}
			}
		}
		while (line != null);
		return objects;
	}

}